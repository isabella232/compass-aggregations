{"version":3,"file":"main.4ba90830cda94379ee39.bundle.js","sources":["webpack:///./src/modules/saved-pipeline.js"],"sourcesContent":["import { getObjectStore } from 'utils/indexed-db';\nimport { createId } from 'modules/id';\nimport { setIsModified } from 'modules/is-modified';\nimport { appRegistryEmit } from 'modules/app-registry';\n\nconst PREFIX = 'aggregations/saved-pipeline';\n\n// constants for save state modal\nexport const SAVED_PIPELINES_LIST_TOGGLED = `${PREFIX}/LIST_TOGGLED`;\n\nexport const SAVED_PIPELINE_ADD = `${PREFIX}/ADD`;\n\nexport const INITIAL_STATE = {\n  pipelines: [],\n  isLoaded: false,\n  isListVisible: false\n};\n\nconst copyState = (state) => Object.assign({}, state);\n\nconst toggleSavedPipelinesList = (state, action) => {\n  const newState = copyState(state);\n  newState.isListVisible = !!action.index;\n  return newState;\n};\n\nconst addSavedPipeline = (state, action) => {\n  return { ...state, pipelines: action.pipelines, isLoaded: true };\n};\n\nconst MAPPINGS = {};\n\nMAPPINGS[SAVED_PIPELINES_LIST_TOGGLED] = toggleSavedPipelinesList;\nMAPPINGS[SAVED_PIPELINE_ADD] = addSavedPipeline;\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  const fn = MAPPINGS[action.type];\n  return fn ? fn(state, action) : state;\n}\n\n/**\n * Action creators for toggling actions in the save m0dal\n *\n * @param {Number} index\n * @returns {Object} The action.\n */\nexport const savedPipelinesListToggle = (index) => ({\n  type: SAVED_PIPELINES_LIST_TOGGLED,\n  index: index\n});\n\nexport const savedPipelineAdd = (pipelines) => ({\n  type: SAVED_PIPELINE_ADD,\n  pipelines: pipelines\n});\n\nexport const getSavedPipelines = () => {\n  return (dispatch, getState) => {\n    if (!getState().savedPipeline.isLoaded) {\n      dispatch(updatePipelineList());\n    }\n  };\n};\n\n/**\n * Update the pipeline list.\n *\n * @returns {Function} The thunk function.\n */\nexport const updatePipelineList = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    getObjectStore('readwrite', (store) => {\n      const index = store.index('namespace');\n      index.getAll(state.namespace).onsuccess = (e) => {\n        const pipelines = e.target.result;\n        dispatch(setIsModified(false));\n        dispatch(savedPipelineAdd(pipelines));\n        dispatch(appRegistryEmit('agg-pipeline-saved', { name: state.name }));\n      };\n    });\n  };\n};\n\n/**\n * Save the current state of your pipeline\n *\n * @returns {Object} The action.\n */\nexport const saveCurrentPipeline = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    if (state.id === '') {\n      dispatch(createId());\n    }\n    const id = getState().id;\n\n    const pipeline = state.pipeline.map((stage) => {\n      return { ...stage, previewDocuments: [] };\n    });\n\n    const stateRecord = Object.assign({}\n      , { namespace: state.namespace }\n      , { pipeline: pipeline }\n      , { name: state.name }\n      , { id: id }\n      , { comments: state.comments }\n      , { sample: state.sample }\n      , { autoPreview: state.autoPreview }\n      , { collation: state.collation }\n      , { collationString: state.collationString }\n    );\n\n    getObjectStore('readwrite', (store) => {\n      const putRequest = store.put(stateRecord, id);\n\n      putRequest.onsuccess = () => {\n        dispatch(updatePipelineList());\n      };\n    });\n  };\n};\n"],"mappings":"AAYA","sourceRoot":""}