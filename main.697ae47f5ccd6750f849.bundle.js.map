{"version":3,"file":"main.697ae47f5ccd6750f849.bundle.js","sources":["webpack:///./src/modules/input-documents.js"],"sourcesContent":["/**\n * The action name prefix.\n */\nconst PREFIX = 'aggregations/input-documents';\n\n/**\n * Input collapsed action name.\n */\nexport const TOGGLE_INPUT_COLLAPSED = `${PREFIX}/TOGGLE_INPUT_COLLAPSED`;\n\n/**\n * The update input documents action.\n */\nexport const UPDATE_INPUT_DOCUMENTS = `${PREFIX}/UPDATE_INPUT_DOCUMENTS`;\n\n/**\n * Loading input documents aciton name.\n */\nexport const LOADING_INPUT_DOCUMENTS = `${PREFIX}/LOADING_INPUT_DOCUMENTS`;\n\n/**\n * The filter constant.\n */\nconst FILTER = Object.freeze({});\n\n/**\n * N/A contant.\n */\nconst NA = 'N/A';\n\n/**\n * The initial state.\n */\nexport const INITIAL_STATE = {\n  count: 0,\n  documents: [],\n  error: null,\n  isExpanded: true,\n  isLoading: false\n};\n\n/**\n * Reducer function for handle state changes to input documents.\n *\n * @param {Object} state - The input documents state.\n * @param {Object} action - The action.\n *\n * @returns {Object} The new state.\n */\nconst reducer = (state = INITIAL_STATE, action) => {\n  if (action.type === TOGGLE_INPUT_COLLAPSED) {\n    return { ...state, isExpanded: !state.isExpanded };\n  } else if (action.type === LOADING_INPUT_DOCUMENTS) {\n    return { ...state, isLoading: true };\n  } else if (action.type === UPDATE_INPUT_DOCUMENTS) {\n    return {\n      ...state,\n      count: action.count,\n      documents: action.documents,\n      error: action.error,\n      isLoading: false\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n\n/**\n * Action creator for namespace changed events.\n *\n * @returns {Object} The namespace changed action.\n */\nexport const toggleInputDocumentsCollapsed = () => ({\n  type: TOGGLE_INPUT_COLLAPSED\n});\n\n/**\n * Update the input documents.\n *\n * @param {Number} count - The count.\n * @param {Array} documents - The documents.\n * @param {Error} error - The error.\n *\n * @returns {Object} The update input documents action.\n */\nexport const updateInputDocuments = (count, documents, error) => ({\n  type: UPDATE_INPUT_DOCUMENTS,\n  count: count,\n  documents: documents,\n  error: error\n});\n\n/**\n * The loading input documents action.\n *\n * @returns {Object} The action.\n */\nexport const loadingInputDocuments = () => ({\n  type: LOADING_INPUT_DOCUMENTS\n});\n\n/**\n * Refresh the input documents.\n *\n * @returns {Function} The function.\n */\nexport const refreshInputDocuments = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const dataService = state.dataService.dataService;\n    const ns = state.namespace;\n\n    const options = {\n      maxTimeMS: state.settings.maxTimeMS\n    };\n\n    const exampleDocumentsPipeline = [{ $limit: state.settings.sampleSize }];\n\n    if (dataService) {\n      dispatch(loadingInputDocuments());\n      dataService.count(ns, FILTER, options, (error, count) => {\n        dataService.aggregate(\n          ns,\n          exampleDocumentsPipeline,\n          options,\n          (err, cursor) => {\n            if (err) {\n              return dispatch(\n                updateInputDocuments(error ? NA : count, [], err)\n              );\n            }\n            cursor.toArray((e, docs) => {\n              dispatch(updateInputDocuments(error ? NA : count, docs, e));\n              cursor.close();\n            });\n          }\n        );\n      });\n    }\n  };\n};\n"],"mappings":"AAuBA","sourceRoot":""}